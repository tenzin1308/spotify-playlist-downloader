{"ast":null,"code":"var _jsxFileName = \"/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Downloader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataLayerValue } from './DataLayer';\nimport { XGrid } from '@material-ui/x-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Downloader({\n  spotify\n}) {\n  _s();\n\n  const [{\n    playlists\n  }, dispatch] = useDataLayerValue();\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    if (playlists !== undefined) {\n      setSongs(playlists.items);\n    }\n  }, [playlists]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 520,\n      width: '100%'\n    },\n    children: songs !== [] ? /*#__PURE__*/_jsxDEV(XGrid, { ...songs,\n      loading: songs.rows.length === 0,\n      rowHeight: 38,\n      checkboxSelection: true,\n      disableSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Empty songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Downloader, \"UpvNlZ7aFpzP0lJ83trnDbxHyj0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Downloader;\nexport default Downloader;\n\nvar _c;\n\n$RefreshReg$(_c, \"Downloader\");","map":{"version":3,"sources":["/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Downloader.js"],"names":["React","useState","useEffect","useDataLayerValue","XGrid","Downloader","spotify","playlists","dispatch","songs","setSongs","undefined","items","height","width","rows","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,KAAT,QAAsB,qBAAtB;;;AAGA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAAA;;AAC7B,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,QAAhB,IAA4BL,iBAAiB,EAAnD;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACX,QAAIK,SAAS,KAAKI,SAAlB,EAA6B;AAC1BD,MAAAA,QAAQ,CAACH,SAAS,CAACK,KAAX,CAAR;AACH;AACJ,GAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;AAOA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAZ;AAAA,cACKL,KAAK,KAAK,EAAV,gBAAgB,QAAC,KAAD,OACTA,KADS;AAEb,MAAA,OAAO,EAAEA,KAAK,CAACM,IAAN,CAAWC,MAAX,KAAsB,CAFlB;AAGb,MAAA,SAAS,EAAE,EAHE;AAIb,MAAA,iBAAiB,MAJJ;AAKb,MAAA,uBAAuB;AALV;AAAA;AAAA;AAAA;AAAA,YAAhB,gBAMM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPX;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAvBQX,U;UAC6BF,iB;;;KAD7BE,U;AAyBT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useDataLayerValue } from './DataLayer'\nimport { XGrid } from '@material-ui/x-grid'\n\n\nfunction Downloader({ spotify }) {\n    const [{ playlists }, dispatch] = useDataLayerValue();\n    const [songs, setSongs] = useState([]);\n\n    useEffect(() => {\n         if (playlists !== undefined) {\n            setSongs(playlists.items)\n        }\n    }, [playlists]);\n\n\n    return (\n        <div style={{ height: 520, width: '100%' }}>\n            {songs !== [] ? (<XGrid\n                {...songs}\n                loading={songs.rows.length === 0}\n                rowHeight={38}\n                checkboxSelection\n                disableSelectionOnClick\n            />) : (<p>Empty songs</p>)}\n            \n        </div>\n    )\n}\n\nexport default Downloader\n"]},"metadata":{},"sourceType":"module"}