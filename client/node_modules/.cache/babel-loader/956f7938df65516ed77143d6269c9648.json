{"ast":null,"code":"var _jsxFileName = \"/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Playlists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDataLayerValue } from './DataLayer';\nimport './Playlists.css';\nimport Songs from './Songs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlists({\n  spotify,\n  images,\n  title,\n  id\n}) {\n  _s();\n\n  const [{\n    songs\n  }, dispatch] = useDataLayerValue();\n\n  const onClickHandler = () => {\n    spotify.getPlaylist(id, {\n      limit: 300\n    }).then(response => dispatch({\n      type: \"SET_SONGS\",\n      songs: response\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playLists\",\n    onClick: onClickHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playLists__info\",\n      children: [console.log(\"songs =>\", songs), images[0] !== undefined ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: images[0].url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://th.bing.com/th/id/OIP.khK65de-Bgy68D6JheAk3QHaHa?pid=ImgDet&rs=1\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), songs !== [] ? /*#__PURE__*/_jsxDEV(Songs, {\n      songs: songs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 29\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Playlists, \"fxH9IQgG/mTR+4aH+J+AAqCfgdM=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Playlists;\nexport default Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"sources":["/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Playlists.js"],"names":["React","useState","useDataLayerValue","Songs","Playlists","spotify","images","title","id","songs","dispatch","onClickHandler","getPlaylist","limit","then","response","type","console","log","undefined","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,KAAnB;AAA0BC,EAAAA;AAA1B,CAAnB,EAAmD;AAAA;;AAC/C,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAYC,QAAZ,IAAwBR,iBAAiB,EAA/C;;AAEA,QAAMS,cAAc,GAAG,MAAM;AACzBN,IAAAA,OAAO,CAACO,WAAR,CAAoBJ,EAApB,EAAwB;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAAxB,EAAwCC,IAAxC,CAA8CC,QAAD,IACzCL,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAE,WADD;AAELP,MAAAA,KAAK,EAAEM;AAFF,KAAD,CADZ;AAOH,GARD;;AASA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,OAAO,EAAEJ,cAApC;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,iBACKM,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBT,KAAvB,CADL,EAEKH,MAAM,CAAC,CAAD,CAAN,KAAca,SAAd,gBAA0B;AAAK,QAAA,GAAG,EAAEb,MAAM,CAAC,CAAD,CAAN,CAAUc,GAApB;AAAyB,QAAA,GAAG,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,cAA1B,gBAA+D;AAAK,QAAA,GAAG,EAAC,0EAAT;AAAoF,QAAA,GAAG,EAAC;AAAxF;AAAA;AAAA;AAAA;AAAA,cAFpE,eAII;AAAA,kBAAMb;AAAN;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKE,KAAK,KAAK,EAAV,gBAAe,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,YAAf,GAAwC,IAP7C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAvBQL,S;UACyBF,iB;;;KADzBE,S;AAyBT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useDataLayerValue } from './DataLayer';\nimport './Playlists.css'\nimport Songs from './Songs';\n\nfunction Playlists({ spotify, images, title, id }) {\n    const [{ songs }, dispatch] = useDataLayerValue();\n    \n    const onClickHandler = () => {\n        spotify.getPlaylist(id, { limit: 300 }).then((response) =>\n            dispatch({\n                type: \"SET_SONGS\",\n                songs: response,\n            })\n        );\n        \n    }\n    return (\n        <div className=\"playLists\" onClick={onClickHandler}>\n            <div className=\"playLists__info\">\n                {console.log(\"songs =>\",songs)}\n                {images[0] !== undefined ? <img src={images[0].url} alt=\"\" /> : <img src=\"https://th.bing.com/th/id/OIP.khK65de-Bgy68D6JheAk3QHaHa?pid=ImgDet&rs=1\" alt=\"\" />}\n                \n                <h1 >{title}</h1>\n            </div>\n            {songs !== [] ? <Songs songs={songs} />: null}\n        </div>\n    )\n}\n\nexport default Playlists\n"]},"metadata":{},"sourceType":"module"}