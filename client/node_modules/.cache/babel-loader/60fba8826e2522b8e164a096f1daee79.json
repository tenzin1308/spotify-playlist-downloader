{"ast":null,"code":"var _jsxFileName = \"/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Downloader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataLayerValue } from './DataLayer';\nimport { XGrid } from '@material-ui/x-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Downloader({\n  spotify\n}) {\n  _s();\n\n  const [{\n    playlists\n  }, dispatch] = useDataLayerValue();\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    if (playlists !== undefined) {\n      setSongs(playlists.items);\n    }\n  }, [playlists]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 520,\n      width: '100%'\n    },\n    children: (playlists === null || playlists === void 0 ? void 0 : playlists.items) ? /*#__PURE__*/_jsxDEV(XGrid, { ...songs,\n      loading: songs.rows.length === 0,\n      rowHeight: 38,\n      checkboxSelection: true,\n      disableSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 33\n    }, this) : console.log(\"waiting...\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Downloader, \"UpvNlZ7aFpzP0lJ83trnDbxHyj0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Downloader;\nexport default Downloader;\n\nvar _c;\n\n$RefreshReg$(_c, \"Downloader\");","map":{"version":3,"sources":["/Users/tenzintashi/Colz/Coding Files/spotify-playlist-downloader/src/Downloader.js"],"names":["React","useState","useEffect","useDataLayerValue","XGrid","Downloader","spotify","playlists","dispatch","songs","setSongs","undefined","items","height","width","rows","length","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,KAAT,QAAsB,qBAAtB;;;AAGA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAAA;;AAC7B,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,QAAhB,IAA4BL,iBAAiB,EAAnD;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACX,QAAIK,SAAS,KAAKI,SAAlB,EAA6B;AAC1BD,MAAAA,QAAQ,CAACH,SAAS,CAACK,KAAX,CAAR;AACH;AACJ,GAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;AAOA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAZ;AAAA,cACK,CAAAP,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEK,KAAX,iBAAmB,QAAC,KAAD,OACZH,KADY;AAEhB,MAAA,OAAO,EAAEA,KAAK,CAACM,IAAN,CAAWC,MAAX,KAAsB,CAFf;AAGhB,MAAA,SAAS,EAAE,EAHK;AAIhB,MAAA,iBAAiB,MAJD;AAKhB,MAAA,uBAAuB;AALP;AAAA;AAAA;AAAA;AAAA,YAAnB,GAMKC,OAAO,CAACC,GAAR,CAAY,YAAZ;AAPV;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAvBQb,U;UAC6BF,iB;;;KAD7BE,U;AAyBT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useDataLayerValue } from './DataLayer'\nimport { XGrid } from '@material-ui/x-grid'\n\n\nfunction Downloader({ spotify }) {\n    const [{ playlists }, dispatch] = useDataLayerValue();\n    const [songs, setSongs] = useState([]);\n\n    useEffect(() => {\n         if (playlists !== undefined) {\n            setSongs(playlists.items)\n        }\n    }, [playlists]);\n\n\n    return (\n        <div style={{ height: 520, width: '100%' }}>\n            {playlists?.items? (<XGrid\n                {...songs}\n                loading={songs.rows.length === 0}\n                rowHeight={38}\n                checkboxSelection\n                disableSelectionOnClick\n            />) : console.log(\"waiting...\")}\n            \n        </div>\n    )\n}\n\nexport default Downloader\n"]},"metadata":{},"sourceType":"module"}